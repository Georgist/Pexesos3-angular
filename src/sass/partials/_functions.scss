// PUBLIC =====================================================================

/// Standard pseudo elements by https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements
$_standard-pseudo-elements: 'before', 'after', 'backdrop', 'cue', 'cue-region', 'first-letter', 'first-line', 'file-selector-button', 'grammar-error', 'marker', 'part(', 'placeholder', 'selection', 'slotted(', 'spelling-error(', 'target-text';

// from SPOT CSS framework
// @author Johnny Seyd (johnnyseyd@gmail.com)
// @link https://github.com/seyd/spot-css
/// Add selector specificity at element level.
@function add-element-specificity($selector, $n) {
  @return add-selector-specificity($selector, $n, '_');
}

/// Add selector specificity at class level.
@function add-class-specificity($selector, $n) {
  @return add-selector-specificity($selector, $n, '._');
}

/// Add selector specificity at id level.
@function add-id-specificity($selector, $n) {
  @return add-selector-specificity($selector, $n, '#_');
}

// PRIVATE =====================================================================

// from SPOT CSS framework
// @author Johnny Seyd (johnnyseyd@gmail.com)
// @link https://github.com/seyd/spot-css
@function extend($selector, $something, $extension) {
  // for each selector (if more selectors in $selector) check if extended selector is present
  @each $single-selector in $selector {
    @if str-index($single-selector+'', $something+'')==null {
      @error 'Extend function has failed! Subselector "'+$something+'" was not found in selector "'+$single-selector+'".';
    }
  }
  // if more selector in $extension, breaks it and replace each individual
  // it makes from ($something: '.item', $extenssion: '':first-child, :last-child') => $new-extension: 'item:first-child, item:last-child'
  $parts: selector-parse($extension);
  $new-extension: ();
  @each $partial-selector in $parts {
    $partial-selector: selector-replace($partial-selector, $partial-selector, $something + $partial-selector);
    $new-extension: append($new-extension, $partial-selector, 'comma');
  }
  // now it is safe to use selector-replace
  @return selector-replace($selector, $something, $new-extension+''); // +'' = convert to string
}

// add selector specificity at `given` level
@function add-selector-specificity($selector, $n, $not-what-mark) {
  $selectors: selector-parse($selector);
  $output: ();
  $addon: '';
  @for $i from 1 to $n+1 {
    $addon: $addon + ':not(' + $not-what-mark + ')';
  }
  // for each selector (if more selectors in $selector)
  @each $single-selector in $selectors {
    $single-selector: to-string($single-selector);
    $pseudo-element: _get-pseudo-element($single-selector);
    @if $pseudo-element!=null {
      $single-selector: str-replace($single-selector, $pseudo-element, '');
      $single-selector: $single-selector + $addon + $pseudo-element;
    } @else {
      $single-selector: $single-selector + $addon;
    }
    $output: append($output, $single-selector, 'comma');
  }
  @return #{$output};
}

@function _get-pseudo-element($selector) {
  $last-selector: nth($selector, length($selector));
  $len: length($_standard-pseudo-elements);
  @for $i from 1 through $len - 1 {
    // check single : for bullet proof reason
    $index: str-index($last-selector, ':'+nth($_standard-pseudo-elements, $i));
    @if $index!=null {
      // check double ::
      @if str-index($last-selector, '::'+nth($_standard-pseudo-elements, $i)) {
        $index: $index - 1;
      }
      @return str-slice($last-selector, $index, -1);
    }
  }
  // non-standard pseudo elements, e.g. ::-webkit-
  $index: str-index($last-selector, '::-');
  @if $index!=null {
    @return str-slice($last-selector, $index, -1);
  }
  @return null;
}

// HELPERS =====================================================================
@function to-string($value) {
  @return inspect($value);
}

@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}
